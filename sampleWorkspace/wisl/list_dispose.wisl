predicate list(+x, alpha) {
    (x == null) * (alpha == nil);
    (x -b> #v, #z) * list(#z, #beta) *
    (alpha == #v::#beta)
}

{ (x == #x) * list(#x, #alpha) }
function dispose(x) {
  [[ invariant {bind: x, #beta} list(x, #beta) ]];
  while (not (x = null)) {
    t := [x + 1];
    delete(x);
    x := t
  };
  return null
}
{ emp }